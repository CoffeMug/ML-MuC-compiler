(* parser/uc.grm
 *)

(* represent left-recursive sequences *)
datatype 'a seq
  = SINGLE of 'a
  | SEQ of 'a seq * 'a

(* convert a left-recursive sequence to a normal list *)
fun seqToList2(SINGLE(x), xs) = x::xs
  | seqToList2(SEQ(seq,x), xs) = seqToList2(seq, x::xs)
fun seqToList(seq) = seqToList2(seq, [])

%%

(* don't change these two declarations *)
%name UC
%header (functor UCLrValsFn(structure Token : TOKEN
                structure Absyn : ABSYN
                structure LexArg : LEXARG) : UC_LRVALS)

%term   
    ANDAND              (* && *)
|   CHAR                (* char *)
|   COMMA               (* , *)
|   DIV                 (* / *)
|   ELSE                (* else *)
|   EOF                 (* <end-of-file> *)
|   EQ                  (* = *)
|   EQEQ                (* == *)
|   GTEQ                (* >= *)
|   GT                  (* > *)
|   IDENT of string     (* foo *)
|   IF                  (* if *)
|   INT                 (* int *)
|   INTEGER_CONSTANT of int 
|   LBRACE              (* { *)
|   LBRACK              (* [ *)
|   LPAREN              (* ( *)
|   LT                  (* < *)
|   LTEQ                (* <= *)
|   MINUS               (* - *)
|   MUL                 (* * *)
|   NOT                 (* ! *)
|   NOTEQ               (* != *)
|   PLUS                (* + *)
|   RBRACE              (* } *)
|   RBRACK              (* ] *)
|   RETURN              (* return *)
|   RPAREN              (* ) *)
|   SEMI                (* ; *)
|   VOID                (* void *)
|   WHILE               (* while *)

%keyword
    CHAR
    ELSE
    IF
    INT
    RETURN
    VOID
    WHILE

%nonterm
    identifier of Absyn.ident
|   expression of Absyn.exp
|   argument_expression_list_opt of Absyn.exp list
|   argument_expression_list of Absyn.exp seq
|   assignment_expression of Absyn.exp
|   unary_operator of Absyn.unop
|   binary_operator of Absyn.binop
|   statement of Absyn.stmt
|   simple_compound_statement of Absyn.stmt
|   compound_statement of (Absyn.varDec list * Absyn.stmt)
|   statement_list of Absyn.stmt 
|   declaration of Absyn.varDec
|   declaration_list_opt of Absyn.varDec list
|   declaration_list of Absyn.varDec seq
|   base_type of Absyn.baseTy
|   declarator of Absyn.declarator
|   program of Absyn.program
|   toplevel_declaration_list of Absyn.topDec seq
|   toplevel_declaration of Absyn.topDec
|   function_parameters of Absyn.varDec list
|   formals_list of Absyn.varDec seq
|   formal of Absyn.varDec
|   emp of Absyn.stmt

%eop EOF
%noshift EOF

%pos LexArg.pos
%arg () : unit
%pure
%verbose
%start program
%left ANDAND
%right EQ
%left EQEQ NOTEQ

%nonassoc LT GT LTEQ GTEQ
%left MINUS PLUS
%left MUL DIV
%nonassoc NOT 


%%

(* A.1.3 Identifiers *)

identifier
    : IDENT
        (Absyn.IDENT(IDENT, IDENTleft, IDENTright))

(* A.2.1 Expressions *)

(* YOUR MODIFICATIONS HERE. YOUR NEED TO EXPRESS PRECEDENCE
   AND ASSOCIATIVITY USING A GRAMMAR REWRITE. *)

expression
    : identifier
        (Absyn.EXP(Absyn.VAR(identifier),identifierleft,identifierright))
    | INTEGER_CONSTANT
        (Absyn.EXP(Absyn.CONST(Absyn.INTcon(INTEGER_CONSTANT)),INTEGER_CONSTANTleft,INTEGER_CONSTANTright))
    | LPAREN expression RPAREN
        (expression)
    | identifier LBRACK expression RBRACK
        (Absyn.EXP(Absyn.ARRAY(identifier,expression),identifierleft,RBRACKright))
    | identifier LPAREN argument_expression_list_opt RPAREN
        (Absyn.EXP(Absyn.FCALL(identifier,argument_expression_list_opt),identifierleft,RPARENright))
    | unary_operator expression
        (Absyn.EXP(Absyn.UNARY(unary_operator,expression),unary_operatorleft,expressionright)) 
    | expression ANDAND expression %prec ANDAND
        (Absyn.EXP(Absyn.BINARY(Absyn.ANDALSO,expression1,expression2),expression1left,expression2right))
    | expression EQEQ expression %prec ANDAND
        (Absyn.EXP(Absyn.BINARY(Absyn.EQ,expression1,expression2),expression1left,expression2right))
    | expression NOTEQ expression %prec NOTEQ
        (Absyn.EXP(Absyn.BINARY(Absyn.NE,expression1,expression2),expression1left,expression2right))
    | expression LT expression %prec LT
        (Absyn.EXP(Absyn.BINARY(Absyn.LT,expression1,expression2),expression1left,expression2right))
    | expression GT expression %prec GT
        (Absyn.EXP(Absyn.BINARY(Absyn.GT,expression1,expression2),expression1left,expression2right))
    | expression LTEQ expression %prec LTEQ
        (Absyn.EXP(Absyn.BINARY(Absyn.LE,expression1,expression2),expression1left,expression2right))
    | expression GTEQ expression %prec GTEQ
        (Absyn.EXP(Absyn.BINARY(Absyn.GE,expression1,expression2),expression1left,expression2right))
    | expression MINUS expression %prec MINUS
        (Absyn.EXP(Absyn.BINARY(Absyn.SUB,expression1,expression2),expression1left,expression2right)) 
    | expression PLUS expression %prec PLUS
        (Absyn.EXP(Absyn.BINARY(Absyn.ADD,expression1,expression2),expression1left,expression2right)) 
    | expression DIV expression %prec DIV
        (Absyn.EXP(Absyn.BINARY(Absyn.DIV,expression1,expression2),expression1left,expression2right))
    | expression MUL expression %prec MUL
        (Absyn.EXP(Absyn.BINARY(Absyn.MUL,expression1,expression2),expression1left,expression2right))
    | NOT expression 
        (Absyn.EXP(Absyn.UNARY(Absyn.NOT,expression1),NOTleft,expression1right))
    | MINUS expression 
        (Absyn.EXP(Absyn.UNARY(Absyn.NEG,expression1),MINUSleft,expression1right))
    | expression EQ expression %prec EQ
        (Absyn.EXP(Absyn.ASSIGN(expression1,expression2),expression1left,expression2right))

unary_operator
    : MINUS
        (Absyn.NEG)
    | NOT
        (Absyn.NOT)

binary_operator
    : MUL
        (Absyn.MUL)
    | DIV
        (Absyn.DIV)
    | PLUS
        (Absyn.ADD)
    | MINUS
        (Absyn.SUB)
    | LT
        (Absyn.LT)
    | GT
        (Absyn.GT)
    | LTEQ
        (Absyn.LE)
    | GTEQ
        (Absyn.GE)
    | EQEQ
        (Absyn.EQ)
    | NOTEQ
        (Absyn.NE)
    | ANDAND
        (Absyn.ANDALSO)

argument_expression_list_opt
    : 
        ([])
    | argument_expression_list
        (seqToList(argument_expression_list))

argument_expression_list
    : assignment_expression
        (SINGLE(assignment_expression))
    | argument_expression_list COMMA assignment_expression
        (SEQ(argument_expression_list, assignment_expression))

assignment_expression 
    : INTEGER_CONSTANT (Absyn.EXP(Absyn.CONST(Absyn.INTcon(INTEGER_CONSTANT)),INTEGER_CONSTANTleft,INTEGER_CONSTANTright))
    | identifier    (Absyn.EXP(Absyn.VAR(identifier),identifierleft,identifierright))
    | expression EQ expression
        (Absyn.EXP(Absyn.ASSIGN(expression1,expression2),expression1left,expression2right)) 
    | identifier LBRACK expression RBRACK
        (Absyn.EXP(Absyn.ARRAY(identifier,expression),identifierleft,expressionright)) 

    | expression
        (expression)

(* A.2.3 Statements *)

statement
    : simple_compound_statement
        (simple_compound_statement)
    | expression SEMI
        (Absyn.STMT(Absyn.EFFECT(expression),expressionleft,SEMIright))
    | SEMI
        (Absyn.STMT(Absyn.EMPTY,SEMIleft,SEMIright))
    | IF LPAREN expression RPAREN statement
        (Absyn.STMT(Absyn.IF(expression,statement,NONE),IFright,statementleft))
    | IF LPAREN expression RPAREN statement ELSE statement
        (Absyn.STMT(Absyn.IF(expression,statement1,SOME statement2),IFright,statement2left))
    | WHILE LPAREN expression RPAREN statement
        (Absyn.STMT(Absyn.WHILE(expression,statement),WHILEleft,statementright))
    | RETURN expression SEMI
        (Absyn.STMT(Absyn.RETURN(SOME expression),RETURNleft, SEMIright))
    | RETURN SEMI
        (Absyn.STMT(Absyn.RETURN(NONE),RETURNleft, SEMIright))

simple_compound_statement
    : LBRACE statement_list RBRACE
        (statement_list)

compound_statement

    : LBRACE declaration_list_opt statement_list RBRACE
        ((declaration_list_opt,statement_list))

statement_list
    : statement 
        (statement) 
    | statement_list statement
        (Absyn.STMT(Absyn.SEQ(statement_list, statement),statement_listleft,statementright))

(* A.2.2 Declarations *)

declaration
    : base_type declarator SEMI
        (Absyn.VARDEC(base_type, declarator))

declaration_list_opt
    : ([])
    | declaration_list
        (seqToList(declaration_list))

declaration_list
    : declaration
        (SINGLE(declaration))
    | declaration_list declaration
        (SEQ(declaration_list, declaration))

base_type
    : CHAR
        (Absyn.CHARty)
    | INT
        (Absyn.INTty)
    | VOID
        (Absyn.VOIDty)

declarator
    : identifier
        (Absyn.VARdecl(identifier))
    | identifier LBRACK INTEGER_CONSTANT RBRACK
        (Absyn.ARRdecl(identifier, SOME INTEGER_CONSTANT))
    | identifier LBRACK RBRACK
        (Absyn.ARRdecl(identifier, NONE))

program
    : toplevel_declaration_list
        (Absyn.PROGRAM{decs = seqToList(toplevel_declaration_list),
                   source = Absyn.Source.dummy})

toplevel_declaration_list
    : toplevel_declaration
        (SINGLE(toplevel_declaration))
    | toplevel_declaration_list toplevel_declaration
        (SEQ(toplevel_declaration_list, toplevel_declaration))

toplevel_declaration
    : base_type identifier function_parameters compound_statement
        (Absyn.FUNC{name=identifier,formals=function_parameters,
                retTy=base_type,
                locals= (#1) compound_statement,
                body= (#2) compound_statement})
    | base_type identifier function_parameters SEMI
        (Absyn.EXTERN{name=identifier,
                  retTy=base_type,
                  formals=function_parameters})
    | declaration
        (Absyn.GLOBAL(declaration))

function_parameters
    : LPAREN VOID RPAREN
        ([])
    | LPAREN formals_list RPAREN
        (seqToList(formals_list))

formals_list
    : formal
        (SINGLE(formal))
    | formals_list COMMA formal
        (SEQ(formals_list, formal))

formal
    : base_type declarator
        (Absyn.VARDEC(base_type, declarator))
